import re
log  = "July 31 07:51:48 mycomputer bad_process[12345]: ERROR Performing package upgrade"
index = log.index("[")
print(log[index+1:index+6])
regex = r"\[(\d+)\]"
result = re.search(regex, log)
print("Using Regular Expressions")
print("Actual Value after searched by regular expressions:",result)
print(result[1])
print(re.search(r"aza", "plaza"))
print(re.search(r"aza", "bazaar"))
print(re.search(r"aza", "maze"))
print(re.search(r"^x", "xenon"))
print(re.search(r"p.ng", "penguin"))
print(re.search(r"p.ng", "pong"))
print(re.search(r"p.ng", "Pangea", re.IGNORECASE))
print(re.search(r"[Pp]ython", "Python"))
print(re.search(r"[a-z]way", "The end of the highway"))
print(re.search(r"[a-z]way", "What a way to go"))
print(re.search(r"cloud[a-zA-Z0-9]", "cloud9"))
print(re.search(r"[^a-zA-Z]", "This is a sentence with spaces."))
print(re.search(r"[^a-zA-Z ]", "This is a sentence with spaces."))
print(re.search(r"cat|dog", "I like cats."))
print(re.search(r"cat|dog", "I like dogs."))
print(re.search(r"cat|dog", "I like dogs and cats."))
print(re.findall(r"cats|dogs", "I like dogs and cats."))
print(re.search(r"Py.*n", "Pygmalion"))
print(re.search(r"Py.*n", "Python Programming"))
print(re.search(r"Py[a-z]*n", "Python Programming"))
print(re.search(r"Py[a-z]*n", "Pyn"))
print(re.search(r"o+l+", "goldfish"))
print(re.search(r"o+l+", "woolly"))
print(re.search(r"o+l+", "woolly"))
print(re.search(r"p?each", "To each of their own"))
print(re.search(r"p?each", "I like peaches"))
print(re.search(r".com", "welcome"))
print(re.search(r"\.com", "welcome"))
print(re.search(r"\.com", "hello.com"))
print(re.search(r"\w*", "This is an example"))
print(re.search(r"\w*", "And_this_is_another"))
print(re.search(r"A.*a", "Argentina"))
print(re.search(r"A.*a", "Azerbaijan"))
print(re.search(r"A.*a", "Argentina"))
print(re.search(r"^A.*a$", "Azerbaijan"))
print(re.search(r"A.*a", "Australia"))
pattern = r"^[a-zA-Z_][a-zA-Z0-9_]*$"
print(re.search(pattern, "_this_is_a_valid_variable_name"))
print(re.search(pattern, "_this_is_a_valid_variable_name"))
print(re.search(pattern, "this is a valid variable name"))
print(re.search(pattern, "_this_is_a_valid_variable_name"))
print(re.search(pattern, "my_variable1"))
print(re.search(pattern, "2my_variable1"))
result = re.search(r"^(\w*), (\w*)$", "Lovelace, Ada")
print(result)
print(result.groups())
print(result[0])
print(result[1])
print(result[2])
print("{} {}".format(result[2], result[1]))
def rearrange_name(name): 
    result = re.search(r"^(\w*), (\w*)$", name)
    if result is None:
        return name
    return "{} {}", format(result[2], result[1])
rearrange_name("Ritchie, Dennis")
rearrange_name("Lovelace, Ada")
def r(name):
    result = re.search(r"^([\w \.-]*), ([\w \.-]*)$", name)
    if result == None:
        return name
    return "{} {}".format(result[2], result[1])
r("Hopper, Grace M.")